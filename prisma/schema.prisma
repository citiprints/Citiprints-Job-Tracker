// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NOTE: Using string fields for enums/JSON to maximize SQLite compatibility

// Models
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      String   @default("WORKER")
  active    Boolean  @default(true)

  tasksCreated  Task[]        @relation("TasksCreated")
  assignments   Assignment[]
  comments      Comment[]
  activities    ActivityLog[] @relation("ActorActivities")
  subtasksAssigned Subtask[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id             String       @id @default(cuid())
  title          String
  description    String       @default("")
  status         String       @default("TODO")
  priority       String       @default("MEDIUM")
  startAt        DateTime?
  dueAt          DateTime?
  estimatedHours Float?
  actualHours    Float?
  customer       String?      // legacy free-text
  customerId     String?
  customerRef    Customer?    @relation(fields: [customerId], references: [id])
  jobNumber      String?
  customFields   String?
  archived       Boolean      @default(false)

  createdById String
  createdBy   User         @relation("TasksCreated", fields: [createdById], references: [id])

  subtasks     Subtask[]
  assignments  Assignment[]
  comments     Comment[]
  attachments  Attachment[]
  activities   ActivityLog[] @relation("TaskActivities")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status, dueAt])
  @@index([priority])
  @@index([customerId])
  @@index([archived])
}

model Customer {
  id        String  @id @default(cuid())
  name      String
  email     String?
  phone     String?
  company   String?
  address   String?

  tasks     Task[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CustomFieldDef {
  id       String    @id @default(cuid())
  key      String    @unique
  label    String
  type     String
  required Boolean   @default(false)
  order    Int       @default(0)

  createdAt DateTime @default(now())
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime

  createdAt DateTime @default(now())
}

model Subtask {
  id             String        @id @default(cuid())
  taskId         String
  task           Task          @relation(fields: [taskId], references: [id])
  title          String
  status         String        @default("TODO")
  assigneeId     String?
  assignee       User?         @relation(fields: [assigneeId], references: [id])
  dueAt          DateTime?
  estimatedHours Float?
  actualHours    Float?
  order          Int           @default(0)

  comments    Comment[]
  attachments Attachment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Assignment {
  id      String @id @default(cuid())
  taskId  String
  userId  String
  role    String @default("assignee")

  task Task @relation(fields: [taskId], references: [id])
  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
}

model Comment {
  id        String   @id @default(cuid())
  body      String
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])

  // Polymorphic via nullable FKs
  taskId    String?
  task      Task?    @relation(fields: [taskId], references: [id])
  subtaskId String?
  subtask   Subtask? @relation(fields: [subtaskId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attachment {
  id        String   @id @default(cuid())
  url       String
  name      String
  size      Int

  // Polymorphic via nullable FKs
  taskId    String?
  task      Task?    @relation(fields: [taskId], references: [id])
  subtaskId String?
  subtask   Subtask? @relation(fields: [subtaskId], references: [id])

  createdAt DateTime @default(now())
}

model ActivityLog {
  id         String   @id @default(cuid())
  entityType String   // e.g., "task" | "subtask"
  entityId   String
  action     String   // e.g., "STATUS_CHANGE", "ASSIGNED", "UPDATED"
  before     String?
  after      String?

  actorId String
  actor   User     @relation("ActorActivities", fields: [actorId], references: [id])

  // Optional direct task linkage for quicker querying
  taskId  String?
  task    Task?    @relation("TaskActivities", fields: [taskId], references: [id])

  at DateTime @default(now())
}

// End of schema
